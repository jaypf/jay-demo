server.port=9190
spring.application.name=jay-web
#spring.cloud.loadbalancer.ribbon.enabled=false
spring.main.allow-bean-definition-overriding=true
#开启ribbon重试是true，关闭时需要设置为false
spring.cloud.loadbalancer.retry.enabled=true
spring.cloud.config.label=master
spring.cloud.config.profile=dev
#这种配置是configserver还单机情况，直接连接这个单机服务就行
#spring.cloud.config.uri=http://localhost:9890/
#configserver高可用配置
#开启configserver服务发现功能
spring.cloud.config.discovery.enabled=true
#服务发现的服务名称
spring.cloud.config.discovery.service-id=jay-config
#如果连接不上获取配置有问题，快速响应失败
spring.cloud.config.fail-fast=true
#默认重试的间隔时间，默认1000ms
spring.cloud.config.retry.multiplier=1000
#下一间隔时间的乘数，默认是1.1
#spring.cloud.config.retry.initial-interval=1.1
#最大间隔时间，最大2000ms
spring.cloud.config.retry.max-interval=2000
#最大重试次数，默认6次
spring.cloud.config.retry.max-attempts=6

eureka.instance.hostname=192.168.163.10
#服务续约，心跳的时间间隔
eureka.instance.lease-renewal-interval-in-seconds=30
#如果从前一次发送心跳时间起，90秒没接受到新的心跳，讲剔除服务
eureka.instance.lease-expiration-duration-in-seconds=90
#是否注册到eureka
eureka.client.fetchRegistry=true
#是否从eureka中拉取注册信息
eureka.client.registerWithEureka=true
#暴露eureka服务的地址
eureka.client.serviceUrl.defaultZone=http://admin:admin@${eureka.instance.hostname}:9090/eureka/
#表示eureka client间隔多久去拉取服务注册信息，默认为30秒
eureka.client.registry-fetch-interval-seconds=30
#健康检测
#eureka.client.healthcheck.enabled=true

#feign开启熔断器
feign.hystrix.enabled=true
#开启feign的压缩功能
feign.compression.request.enabled=true
feign.compression.response.enabled=true
#feign.compression.request.mime-types=text/xml,application/xml,application/json
#feign.compression.request.min-request-size=2048


#全局超时时间(<commandKey>作为前缀,默认是采用Feign的客户端的方法名字作为标识,defaul可以改为具体的@HystrixCommand中commandKey)
#断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试(当大于ribbon超时时间时短路时间将以hystrix为准)。
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000

#ribbon.restclient.enabled=true
#ribbon.client.name=jay-order
ribbon.eureka.enabled=true
#单位ms ,请求连接超时时间
ribbon.ConnectTimeout=1000
ribbon.ReadTimeout=3000
#是否对所有操作请求都进行重试，关闭时需要将spring.cloud.loadbalancer.retry.enabled=false,如果要重试，需要注意被调用方的幂等设计
ribbon.OkToRetryOnAllOperations=false
#切换实例的重试次数
ribbon.MaxAutoRetriesNextServer=0
#对当前实例的重试次数(当Eureka中可以找到当前服务，但是服务连不上时将会重试)
ribbon.MaxAutoRetries=0
ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
#ping，可配置为新实现类
ribbon.NFLoadBalancerPingClassName=com.netflix.loadbalancer.PingUrl
#ping间隔，可配置为新实现类
#NFLoadBalancerPingInterval: 2

management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
#hystrix.stream  开放所有的监控接口
management.endpoints.web.exposure.include=*

spring.rabbitmq.host=172.24.141.23
spring.rabbitmq.port=5672
spring.rabbitmq.username=jay
spring.rabbitmq.password=jaypf
# 刷新配置url  http://localhost:9190/actuator/bus-refresh
spring.cloud.bus.refresh.enabled=true
spring.cloud.bus.trace.enabled=true

#这里只能用ip:端口或者域名:端口，不能使用服务名称
security.oauth2.resource.user-info-uri=http://192.168.163.10:9490/auth/security/check
security.oauth2.resource.prefer-token-info=false
#security.oauth2.client.id=jay-web
security.oauth2.client.clientId=jay-web
security.oauth2.client.client-secret=123456
security.oauth2.client.access-token-uri=http://jay-zuul/auth/oauth/token
security.oauth2.client.grant-type=password
security.oauth2.client.scope=all

#management.security.enabled=false